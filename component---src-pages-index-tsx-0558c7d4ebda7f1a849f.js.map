{"version":3,"sources":["webpack:///./src/components/molecules/Profile/Profile.tsx","webpack:///./src/components/organisms/CardsList/CardsList.tsx","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./src/components/atoms/Card/Card.tsx","webpack:///./src/components/molecules/PostCard/PostCard.tsx","webpack:///./src/utils/numbers.ts","webpack:///./src/components/molecules/ProjectCard/ProjectCard.tsx","webpack:///./src/components/pages/IndexPage/IndexPage.tsx","webpack:///./src/pages/index.tsx","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js"],"names":["Profile","image","name","username","background","profession","website","location","style","backgroundImage","className","src","alt","href","Tag","icon","Icon","title","CardsList","children","React","map","card","loader","enqueue","createContext","Card","padding","link","componentClassNames","classNames","defaultProps","PostCard","description","undefined","to","formatNumber","num","toString","replace","ProjectCard","language","forks","stars","target","rel","IndexPage","profile","posts","projects","length","post","key","id","project","Footer","pageQuery","data","allPost","nodes","allProject","Layout","excerpt","cover","path","full_name","homepage","html_url","forks_count","stargazers_count","m","module","exports","require","default","ProdPageRenderer","pageResources","createElement","InternalPageRenderer","json"],"mappings":"+NAoBaA,G,UAAkC,SAAC,GAAD,IAC7CC,EAD6C,EAC7CA,MACAC,EAF6C,EAE7CA,KACAC,EAH6C,EAG7CA,SACAC,EAJ6C,EAI7CA,WACAC,EAL6C,EAK7CA,WACAC,EAN6C,EAM7CA,QACAC,EAP6C,EAO7CA,SAP6C,OAS7C,yBAAOC,MAAO,CAAEC,gBAAiBL,EAAa,OAAOA,EAAV,IAA0B,IAAMM,UAAU,WACnF,uBAAKA,UAAU,gBAAgBC,IAAKV,EAAOW,IAAI,KAE/C,sBAAIF,UAAU,gBAAgBR,GAC9B,qBAAGQ,UAAU,oBACX,qBAAGG,KAAI,qBAAuBV,GAA9B,IAA4CA,IAE9C,qBAAGO,UAAU,sBAAsBL,IACjCC,GAAWC,IACX,sBAAIG,UAAU,gBACXJ,GACC,sBAAII,UAAU,eACZ,gBAACI,EAAA,EAAD,CAAKC,KAAM,gBAACC,EAAA,EAAD,CAAMD,KAAK,UAAUE,MAAM,aACpC,qBAAGJ,KAAMP,GAAUA,KAKxBC,GACC,sBAAIG,UAAU,eACZ,gBAACI,EAAA,EAAD,CAAKC,KAAM,gBAACC,EAAA,EAAD,CAAMD,KAAK,WAAWE,MAAM,cAAgBV,QCtCtDW,G,UAAsC,SAAC,GAAD,IAAGD,EAAH,EAAGA,MAAOE,EAAV,EAAUA,SAAV,OACjD,2BAAST,UAAU,cACjB,sBAAIA,UAAU,4BAA4BO,GAC1C,sBAAIP,UAAU,OACXU,WAAeC,IAAIF,GAAU,SAAAG,GAAI,OAChC,sBAAIZ,UAAU,sCAAsCY,U,qDCFnCC,QAAOC,QAELJ,IAAMK,cAAc,I,yBCFlCC,G,UAA4B,SAAC,GAA2C,IAAzCC,EAAyC,EAAzCA,QAASC,EAAgC,EAAhCA,KAAMlB,EAA0B,EAA1BA,UAAWS,EAAe,EAAfA,SAC9DU,EAAsBC,IAC1B,OACA,CACE,gBAAiBH,EACjB,aAAcC,GAEhBlB,GAGF,OAAO,2BAASA,UAAWmB,GAAsBV,KAGnDO,EAAKK,aAAe,CAClBJ,SAAS,EACTC,MAAM,G,cCXKI,EAAoC,SAAC,GAAD,IAAGf,EAAH,EAAGA,MAAOgB,EAAV,EAAUA,YAAahC,EAAvB,EAAuBA,MAAO2B,EAA9B,EAA8BA,KAA9B,OAC/C,gBAAC,EAAD,CAAMlB,UAAU,YAAYkB,OAAQA,EAAMD,SAAS,GACjD,uBAAKjB,UAAU,kBAAkBF,MAAO,CAAEC,gBAAiBR,EAAQ,OAAOA,EAAV,SAAqBiC,IACjFjC,EAAoD,KAA5C,gBAACe,EAAA,EAAD,CAAMC,MAAM,UAAUF,KAAK,eAEvC,uBAAKL,UAAU,mBACb,sBAAIA,UAAU,8BACXkB,EACC,gBAAC,IAAD,CAAMO,GAAIP,EAAMlB,UAAU,WACvBO,GAGHA,GAGHgB,GAAe,qBAAGvB,UAAU,0CAA0CuB,MCxBhEG,G,8BAAe,SAACC,GAAD,OAC1BA,EACGC,WACAC,QAAQ,0BAA2B,OACnCA,QAAQ,IAAK,OCSLC,G,UAA0C,SAAC,GAAD,IAAGvB,EAAH,EAAGA,MAAOgB,EAAV,EAAUA,YAAaL,EAAvB,EAAuBA,KAAMa,EAA7B,EAA6BA,SAAUC,EAAvC,EAAuCA,MAAOC,EAA9C,EAA8CA,MAA9C,OACrD,gBAAC,EAAD,CAAMjC,UAAU,eAAekB,OAAQA,GACrC,sBAAIlB,UAAU,iCACXkB,EACC,qBAAGf,KAAMe,EAAMgB,OAAO,SAASC,IAAI,sBAAsBnC,UAAU,WAChEO,GAGHA,GAGJ,qBAAGP,UAAU,6CAA6CuB,GAE1D,uBAAKvB,UAAU,qBACb,gBAACI,EAAA,EAAD,CAAKC,KAAM,gBAACC,EAAA,EAAD,CAAMD,KAAK,OAAOE,MAAM,cAAgBwB,GAClD,IAAMC,GAAS,gBAAC5B,EAAA,EAAD,CAAKC,KAAM,gBAACC,EAAA,EAAD,CAAMD,KAAK,OAAOE,MAAM,WAAamB,EAAaM,IAC5E,IAAMC,GAAS,gBAAC7B,EAAA,EAAD,CAAKC,KAAM,gBAACC,EAAA,EAAD,CAAMD,KAAK,OAAOE,MAAM,WAAamB,EAAaO,QAKnFH,EAAYT,aAAe,CACzBW,MAAO,EACPC,MAAO,G,gBC9BIG,G,UAAsC,SAAC,GAAiC,IAA/BC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACpE,OACE,yBAAKvC,UAAU,cACb,kBAAC,EAAYqC,GAEb,0BAAMrC,UAAU,oBACbsC,EAAME,OAAS,GACd,kBAAC,EAAD,CAAWjC,MAAM,UACd+B,EAAM3B,KAAI,SAAA8B,GAAI,OACb,kBAAC,EAAD,eAAUC,IAAG,QAAUD,EAAKE,IAAUF,QAK3CF,EAASC,OAAS,GACjB,kBAAC,EAAD,CAAWjC,MAAM,aACdgC,EAAS5B,KAAI,SAAAiC,GAAO,OACnB,kBAAC,EAAD,eAAaF,IAAG,WAAaE,EAAQD,IAAUC,QAKrD,kBAACC,EAAA,EAAD,UCcKC,EAAY,aA2BVV,UAnE6B,SAAC,GAKvC,QAJJW,KACoBT,EAGhB,EAHFU,QAAWC,MACUV,EAEnB,EAFFW,WAAcD,MAYhB,OACE,gBAACE,EAAA,EAAD,CAAQ5C,MAAM,kBAAkBgB,YAAY,eAC1C,gBAAC,EAAD,CACEe,MAAOA,EAAM3B,KAAI,SAAC8B,GAAD,MAAgB,CAC/BE,GAAIF,EAAKE,GACTpB,YAAakB,EAAKW,QAClB7C,MAAOkC,EAAKlC,MACZhB,MAAOkD,EAAKY,MACZnC,KAAMuB,EAAKa,SAEbjB,QAnBwB,CAC5B5C,SAAU,WACVD,KAAM,kBACND,MAAO,oDACPG,WAAY,mEACZC,WAAY,sBACZE,SAAU,kBAcN0C,SAAUA,EAAS5B,KAAI,SAACiC,GAAD,MAAmB,CACxCD,GAAIC,EAAQD,GACZpC,MAAOqC,EAAQW,UACfhC,YAAaqB,EAAQrB,YACrBL,KAAM0B,EAAQY,UAAYZ,EAAQa,SAClC1B,SAAUa,EAAQb,SAClBC,MAAOY,EAAQc,YACfzB,MAAOW,EAAQe,0B,qBC5CzB,IAAsBC,EAKpBC,EAAOC,SALaF,EAKWG,EAAQ,UALRH,EAAEI,SAAYJ,G,wFCsBhCK,UAjBU,SAAC,GAAiC,IAA/BpE,EAA8B,EAA9BA,SAAUqE,EAAoB,EAApBA,cACpC,OAAKA,EAGExD,IAAMyD,cAAcC,IAApB,eACLvE,WACAqE,iBACGA,EAAcG,OALV","file":"component---src-pages-index-tsx-0558c7d4ebda7f1a849f.js","sourcesContent":["import * as React from 'react';\n\nimport { Tag } from 'components/atoms/Tag';\nimport { Icon } from 'components/atoms/Icon';\n\nimport './Profile.scss';\n\nexport type ProfileProps = {\n  image: string;\n  name: string;\n  username: string;\n  background?: string;\n  profession?: string;\n  website?: string;\n  location?: string;\n};\n\n/**\n * Profile Component\n */\nexport const Profile: React.FC<ProfileProps> = ({\n  image,\n  name,\n  username,\n  background,\n  profession,\n  website,\n  location,\n}) => (\n  <aside style={{ backgroundImage: background ? `url(${background})` : '' }} className=\"profile\">\n    <img className=\"profile_image\" src={image} alt=\"\" />\n\n    <h1 className=\"profile_name\">{name}</h1>\n    <p className=\"profile_username\">\n      <a href={`http://github.com/${username}`}>@{username}</a>\n    </p>\n    <p className=\"profile_profession\">{profession}</p>\n    {(website || location) && (\n      <ul className=\"profile_tags\">\n        {website && (\n          <li className=\"profile_tag\">\n            <Tag icon={<Icon icon=\"website\" title=\"Website\" />}>\n              <a href={website}>{website}</a>\n            </Tag>\n          </li>\n        )}\n\n        {location && (\n          <li className=\"profile_tag\">\n            <Tag icon={<Icon icon=\"location\" title=\"Location\" />}>{location}</Tag>\n          </li>\n        )}\n      </ul>\n    )}\n  </aside>\n);\n","import * as React from 'react';\n\nimport './CardsList.scss';\n\ntype CardsListProps = {\n  title: string;\n};\n\n/**\n * CardsList Component\n */\nexport const CardsList: React.FC<CardsListProps> = ({ title, children }) => (\n  <section className=\"cards-list\">\n    <h1 className=\"cards-list_title title-1\">{title}</h1>\n    <ul className=\"row\">\n      {React.Children.map(children, card => (\n        <li className=\"cards-list_item col-xs-12 col-sm-6\">{card}</li>\n      ))}\n    </ul>\n  </section>\n);\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","import * as React from 'react';\nimport classNames from 'classnames';\n\nimport './Card.scss';\n\ntype CardProps = {\n  link?: boolean;\n  padding?: boolean;\n  className?: string;\n};\n\n/**\n * Card Component\n */\nexport const Card: React.FC<CardProps> = ({ padding, link, className, children }) => {\n  const componentClassNames = classNames(\n    'card',\n    {\n      'card--padding': padding,\n      'card--link': link,\n    },\n    className,\n  );\n\n  return <article className={componentClassNames}>{children}</article>;\n};\n\nCard.defaultProps = {\n  padding: true,\n  link: false,\n};\n","import * as React from 'react';\nimport { Link } from 'gatsby';\n\nimport { Card } from 'components/atoms/Card';\nimport { Icon } from 'components/atoms/Icon';\n\nimport './PostCard.scss';\n\nexport type PostCardProps = {\n  title: string;\n  description?: string;\n  image?: string;\n  link?: string;\n};\n\n/**\n * PostCard Component\n */\nexport const PostCard: React.FC<PostCardProps> = ({ title, description, image, link }) => (\n  <Card className=\"post-card\" link={!!link} padding={false}>\n    <div className=\"post-card_image\" style={{ backgroundImage: image ? `url(${image})` : undefined }}>\n      {!image ? <Icon title=\"article\" icon=\"newspaper\" /> : null}\n    </div>\n    <div className=\"post-card_inner\">\n      <h1 className=\"post-card_title card_title\">\n        {link ? (\n          <Link to={link} className=\"a-block\">\n            {title}\n          </Link>\n        ) : (\n          title\n        )}\n      </h1>\n      {description && <p className=\"post-card_description card_description\">{description}</p>}\n    </div>\n  </Card>\n);\n","/**\n * Format number to french\n *\n * @example 2000.34 -> '2 000,34'\n *\n * @param {number} num\n *\n * @return {string}\n */\nexport const formatNumber = (num: number): string =>\n  num\n    .toString()\n    .replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1\\u00a0')\n    .replace('.', ',');\n","import * as React from 'react';\n\nimport { formatNumber } from 'utils/numbers';\n\nimport { Card } from 'components/atoms/Card';\nimport { Tag } from 'components/atoms/Tag';\nimport { Icon } from 'components/atoms/Icon';\n\nimport './ProjectCard.scss';\n\nexport type ProjectCardProps = {\n  title: string;\n  description: string;\n  link?: string;\n  language: string;\n  forks?: number;\n  stars?: number;\n};\n\n/**\n * ProjectCard Component\n */\nexport const ProjectCard: React.FC<ProjectCardProps> = ({ title, description, link, language, forks, stars }) => (\n  <Card className=\"project-card\" link={!!link}>\n    <h1 className=\"project-card_title card_title\">\n      {link ? (\n        <a href={link} target=\"_blank\" rel=\"noreferrer noopener\" className=\"a-block\">\n          {title}\n        </a>\n      ) : (\n        title\n      )}\n    </h1>\n    <p className=\"project-card_description card_description\">{description}</p>\n\n    <div className=\"project-card_tags\">\n      <Tag icon={<Icon icon=\"code\" title=\"Language\" />}>{language}</Tag>\n      {0 !== forks && <Tag icon={<Icon icon=\"fork\" title=\"Forks\" />}>{formatNumber(forks!)}</Tag>}\n      {0 !== stars && <Tag icon={<Icon icon=\"star\" title=\"Stars\" />}>{formatNumber(stars!)}</Tag>}\n    </div>\n  </Card>\n);\n\nProjectCard.defaultProps = {\n  forks: 0,\n  stars: 0,\n};\n","import React from 'react';\nimport { Profile, ProfileProps } from 'components/molecules/Profile';\nimport { CardsList } from 'components/organisms/CardsList';\nimport { PostCard, PostCardProps } from 'components/molecules/PostCard';\nimport { ProjectCard, ProjectCardProps } from 'components/molecules/ProjectCard';\nimport { Footer } from 'components/organisms/Footer';\n\nimport './IndexPage.scss';\n\nexport type IndexPageProps = {\n  profile: ProfileProps;\n  posts: ({ id: string } & PostCardProps)[];\n  projects: ({ id: string } & ProjectCardProps)[];\n};\n\nexport const IndexPage: React.FC<IndexPageProps> = ({ profile, posts, projects }) => {\n  return (\n    <div className=\"index-page\">\n      <Profile {...profile} />\n\n      <main className=\"index-page_inner\">\n        {posts.length > 0 && (\n          <CardsList title=\"Posts.\">\n            {posts.map(post => (\n              <PostCard key={`post-${post.id}`} {...post} />\n            ))}\n          </CardsList>\n        )}\n\n        {projects.length > 0 && (\n          <CardsList title=\"Projects.\">\n            {projects.map(project => (\n              <ProjectCard key={`project-${project.id}`} {...project} />\n            ))}\n          </CardsList>\n        )}\n\n        <Footer />\n      </main>\n    </div>\n  );\n};\n","import * as React from 'react';\nimport { graphql } from 'gatsby';\n\nimport { Layout } from 'components/global/Layout';\nimport { IndexPage as IndexPageComponent } from 'components/pages/IndexPage';\nimport { ProfileProps } from 'components/molecules/Profile';\n\ntype IndexPageProps = {\n  data: any;\n};\n\nconst IndexPage: React.FC<IndexPageProps> = ({\n  data: {\n    allPost: { nodes: posts },\n    allProject: { nodes: projects },\n  },\n}) => {\n  const profile: ProfileProps = {\n    username: 'qmachard',\n    name: 'Quentin Machard',\n    image: 'https://avatars2.githubusercontent.com/u/11388211',\n    background: 'https://images.unsplash.com/photo-1550647134-b512b01d62a2?h=1500',\n    profession: 'Front-End Developer',\n    location: 'Rennes, France',\n  };\n\n  return (\n    <Layout title=\"Developers Blog\" description=\"Lorem ipsum\">\n      <IndexPageComponent\n        posts={posts.map((post: any) => ({\n          id: post.id,\n          description: post.excerpt,\n          title: post.title,\n          image: post.cover,\n          link: post.path,\n        }))}\n        profile={profile}\n        projects={projects.map((project: any) => ({\n          id: project.id,\n          title: project.full_name,\n          description: project.description,\n          link: project.homepage || project.html_url,\n          language: project.language,\n          forks: project.forks_count,\n          stars: project.stargazers_count,\n        }))}\n      />\n    </Layout>\n  );\n};\n\nexport const pageQuery = graphql`\n  query {\n    allPost {\n      nodes {\n        id\n        title\n        path\n        cover\n        excerpt\n      }\n    }\n    allProject(filter: { fork: { eq: false } }) {\n      nodes {\n        id\n        full_name\n        fork\n        language\n        stargazers_count\n        forks_count\n        description\n        html_url\n        homepage\n      }\n    }\n  }\n`;\n\nexport default IndexPage;\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n"],"sourceRoot":""}