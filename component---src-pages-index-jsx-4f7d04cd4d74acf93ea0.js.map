{"version":3,"sources":["webpack:///./src/components/molecules/Profile/Profile.jsx","webpack:///./src/components/organisms/CardsList/CardsList.jsx","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./src/components/atoms/Card/Card.jsx","webpack:///./src/components/molecules/PostCard/PostCard.jsx","webpack:///./src/utils/numbers.js","webpack:///./src/components/molecules/ProjectCard/ProjectCard.jsx","webpack:///./src/components/pages/IndexPage/IndexPage.jsx","webpack:///./src/pages/index.jsx","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js"],"names":["Profile","image","name","username","background","profession","website","location","style","backgroundImage","className","src","alt","href","Tag","icon","Icon","title","propTypes","PropTypes","string","isRequired","defaultProps","CardsList","children","React","map","card","loader","enqueue","createContext","object","func","Card","padding","link","componentClassNames","classNames","bool","PostCard","description","undefined","to","formatNumber","num","toString","replace","ProjectCard","language","forks","stars","target","rel","number","IndexPage","profile","posts","projects","length","post","key","id","project","Footer","data","site","siteMetadata","theme","allPost","nodes","allProject","Layout","excerpt","cover","path","full_name","homepage","html_url","forks_count","stargazers_count","pageQuery","fork","m","module","exports","require","default","ProdPageRenderer","pageResources","createElement","InternalPageRenderer","json","shape","pathname"],"mappings":"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","file":"component---src-pages-index-jsx-4f7d04cd4d74acf93ea0.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Tag from '../../atoms/Tag';\nimport Icon from '../../atoms/Icon';\n\nimport './Profile.scss';\n\n/**\n * Profile Component\n */\nconst Profile = ({ image, name, username, background, profession, website, location }) => (\n  <aside style={{ backgroundImage: background ? `url(${background})` : '' }} className=\"profile\">\n    <img className=\"profile_image\" src={image} alt=\"\" />\n\n    <h1 className=\"profile_name\">{name}</h1>\n    <p className=\"profile_username\">\n      <a href={`http://github.com/${username}`}>@{username}</a>\n    </p>\n    <p className=\"profile_profession\">{profession}</p>\n    {(website || location) && (\n      <ul className=\"profile_tags\">\n        {website && (\n          <li className=\"profile_tag\">\n            <Tag icon={<Icon icon=\"website\" title=\"Website\" />}>\n              <a href={website}>{website}</a>\n            </Tag>\n          </li>\n        )}\n\n        {location && (\n          <li className=\"profile_tag\">\n            <Tag icon={<Icon icon=\"location\" title=\"Location\" />}>{location}</Tag>\n          </li>\n        )}\n      </ul>\n    )}\n  </aside>\n);\n\nProfile.propTypes = {\n  image: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  username: PropTypes.string.isRequired,\n  background: PropTypes.string,\n  profession: PropTypes.string,\n  website: PropTypes.string,\n  location: PropTypes.string,\n};\n\nProfile.defaultProps = {\n  background: null,\n  profession: null,\n  website: null,\n  location: null,\n};\n\nexport default Profile;\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\n\nimport './CardsList.scss';\n\n/**\n * CardsList Component\n */\nconst CardsList = ({ title, children }) => (\n  <section className=\"cards-list\">\n    <h1 className=\"cards-list_title title-1\">{title}</h1>\n    <ul className=\"row\">\n      {React.Children.map(children, card => (\n        <li className=\"cards-list_item col-xs-12 col-sm-6\">{card}</li>\n      ))}\n    </ul>\n  </section>\n);\n\nCardsList.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n\nexport default CardsList;\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport './Card.scss';\n\n/**\n * Card Component\n */\nconst Card = ({ padding, link, className, children }) => {\n  const componentClassNames = classNames(\n    'card',\n    {\n      'card--padding': padding,\n      'card--link': link,\n    },\n    className,\n  );\n\n  return <article className={componentClassNames}>{children}</article>;\n};\n\nCard.propTypes = {\n  link: PropTypes.bool,\n  padding: PropTypes.bool,\n  className: PropTypes.string,\n};\n\nCard.defaultProps = {\n  padding: true,\n  link: false,\n  className: null,\n};\n\nexport default Card;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'gatsby';\n\nimport Card from '../../atoms/Card';\nimport Icon from '../../atoms/Icon';\n\nimport './PostCard.scss';\n\n/**\n * PostCard Component\n */\nconst PostCard = ({ title, description, image, link }) => (\n  <Card className=\"post-card\" link={!!link} padding={false}>\n    <div className=\"post-card_image\" style={{ backgroundImage: image ? `url(${image})` : undefined }}>\n      {!image ? <Icon title=\"article\" icon=\"newspaper\" /> : null}\n    </div>\n    <div className=\"post-card_inner\">\n      <h1 className=\"post-card_title card_title\">\n        {link ? (\n          <Link to={link} className=\"a-block\">\n            {title}\n          </Link>\n        ) : (\n          title\n        )}\n      </h1>\n      {description && <p className=\"post-card_description card_description\">{description}</p>}\n    </div>\n  </Card>\n);\n\nPostCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  image: PropTypes.string,\n  link: PropTypes.string,\n};\n\nPostCard.defaultProps = {\n  description: null,\n  image: null,\n  link: null,\n};\n\nexport default PostCard;\n","/* eslint-disable import/prefer-default-export */\n\n/**\n * Format number to french\n *\n * @example 2000.34 -> '2 000,34'\n *\n * @param {number} num\n *\n * @return {string}\n */\nexport const formatNumber = (num) =>\n  num\n    .toString()\n    .replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1\\u00a0')\n    .replace('.', ',');\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { formatNumber } from '../../../utils/numbers';\n\nimport Card from '../../atoms/Card';\nimport Tag from '../../atoms/Tag';\nimport Icon from '../../atoms/Icon';\n\nimport './ProjectCard.scss';\n\n/**\n * ProjectCard Component\n */\nconst ProjectCard = ({ title, description, link, language, forks, stars }) => (\n  <Card className=\"project-card\" link={!!link}>\n    <h1 className=\"project-card_title card_title\">\n      {link ? (\n        <a href={link} target=\"_blank\" rel=\"noreferrer noopener\" className=\"a-block\">\n          {title}\n        </a>\n      ) : (\n        title\n      )}\n    </h1>\n    <p className=\"project-card_description card_description\">{description}</p>\n\n    <div className=\"project-card_tags\">\n      <Tag icon={<Icon icon=\"code\" title=\"Language\" />}>{language}</Tag>\n      {forks !== 0 && <Tag icon={<Icon icon=\"fork\" title=\"Forks\" />}>{formatNumber(forks)}</Tag>}\n      {stars !== 0 && <Tag icon={<Icon icon=\"star\" title=\"Stars\" />}>{formatNumber(stars)}</Tag>}\n    </div>\n  </Card>\n);\n\nProjectCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  language: PropTypes.string.isRequired,\n  link: PropTypes.string,\n  forks: PropTypes.number,\n  stars: PropTypes.number,\n};\n\nProjectCard.defaultProps = {\n  link: null,\n  forks: 0,\n  stars: 0,\n};\n\nexport default ProjectCard;","import React from 'react';\nimport * as PropTypes from 'prop-types';\n\nimport Profile from '../../molecules/Profile';\nimport CardsList from '../../organisms/CardsList';\nimport PostCard from '../../molecules/PostCard';\nimport ProjectCard from '../../molecules/ProjectCard';\nimport Footer from '../../organisms/Footer';\n\nimport './IndexPage.scss';\n\nconst IndexPage = ({ profile, posts, projects }) => {\n  return (\n    <div className=\"index-page\">\n      <Profile\n        username={profile.username}\n        name={profile.name}\n        background={profile.background}\n        image={profile.image}\n        location={profile.location}\n        profession={profile.profession}\n        website={profile.website}\n      />\n\n      <main className=\"index-page_inner\">\n        {posts.length > 0 && (\n          <CardsList title=\"Posts.\">\n            {posts.map((post) => (\n              <PostCard\n                key={`post-${post.id}`}\n                title={post.title}\n                image={post.image}\n                description={post.description}\n                link={post.link}\n              />\n            ))}\n          </CardsList>\n        )}\n\n        {projects.length > 0 && (\n          <CardsList title=\"Projects.\">\n            {projects.map((project) => (\n              <ProjectCard\n                key={`project-${project.id}`}\n                description={project.description}\n                title={project.title}\n                language={project.language}\n                link={project.link}\n                forks={project.forks}\n                stars={project.stars}\n              />\n            ))}\n          </CardsList>\n        )}\n\n        <Footer />\n      </main>\n    </div>\n  );\n};\n\nIndexPage.propTypes = {\n  profile: PropTypes.shape(Profile.propTypes).isRequired,\n  posts: PropTypes.arrayOf(PropTypes.shape({ id: PropTypes.string, ...PostCard.propTypes })).isRequired,\n  projects: PropTypes.arrayOf(PropTypes.shape({ id: PropTypes.string, ...ProjectCard.propTypes })).isRequired,\n};\n\nIndexPage.defaultProps = {};\n\nexport default IndexPage;\n","import React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { graphql } from 'gatsby';\n\nimport Layout from '../components/global/Layout';\nimport IndexPageComponent from '../components/pages/IndexPage';\n\nconst IndexPage = ({\n  data: {\n    site: {\n      siteMetadata: { theme },\n    },\n    allPost: { nodes: posts },\n    allProject: { nodes: projects },\n  },\n}) => {\n  const profile = {\n    username: 'qmachard',\n    name: 'Quentin Machard',\n    image: 'https://avatars2.githubusercontent.com/u/11388211',\n    background: 'https://images.unsplash.com/photo-1550647134-b512b01d62a2?h=1500',\n    profession: 'Front-End Developer',\n    location: 'Rennes, France',\n  };\n\n  return (\n    <Layout className=\"index-page\" title=\"Developers Blog\" description=\"Lorem ipsum\" theme={theme}>\n      <IndexPageComponent\n        posts={posts.map((post) => ({\n          id: post.id,\n          description: post.excerpt,\n          title: post.title,\n          image: post.cover,\n          link: post.path,\n        }))}\n        profile={profile}\n        projects={projects.map((project) => ({\n          id: project.id,\n          title: project.full_name,\n          description: project.description,\n          link: project.homepage || project.html_url,\n          language: project.language,\n          forks: project.forks_count,\n          stars: project.stargazers_count,\n        }))}\n      />\n    </Layout>\n  );\n};\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        theme\n      }\n    }\n    allPost {\n      nodes {\n        id\n        title\n        path\n        cover\n        excerpt\n      }\n    }\n    allProject(filter: { fork: { eq: false } }) {\n      nodes {\n        id\n        full_name\n        fork\n        language\n        stargazers_count\n        forks_count\n        description\n        html_url\n        homepage\n      }\n    }\n  }\n`;\n\nIndexPage.propTypes = {\n  data: PropTypes.shape({\n    site: PropTypes.shape({\n      siteMetadata: PropTypes.shape({\n        theme: PropTypes.string,\n      }),\n    }),\n    allPost: PropTypes.shape({\n      nodes: PropTypes.shape({\n        id: PropTypes.string,\n        title: PropTypes.string,\n        path: PropTypes.string,\n        cover: PropTypes.string,\n        excerpt: PropTypes.string,\n      }),\n    }),\n    allProject: PropTypes.shape({\n      nodes: PropTypes.shape({\n        id: PropTypes.string,\n        full_name: PropTypes.string,\n        fork: PropTypes.string,\n        language: PropTypes.string,\n        stargazers_count: PropTypes.number,\n        forks_count: PropTypes.number,\n        description: PropTypes.string,\n        html_url: PropTypes.string,\n        homepage: PropTypes.string,\n      }),\n    }),\n  }).isRequired,\n};\n\nexport default IndexPage;\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n"],"sourceRoot":""}