{"componentChunkName":"component---src-templates-post-jsx","path":"/posts/concevoir-une-api-restful","result":{"data":{"site":{"siteMetadata":{"theme":"dark"}},"post":{"id":"10","title":"Concevoir une API RESTful","html":"<h1>Concevoir une API REST</h1>\n<p>Pour communiquer entre elles, les applications ont besoin d'un support <strong>bas√© g√©n√©ralement sur HTTP</strong>. C'est une qu'on appelle <strong>une API</strong> ou <strong>un webservice</strong>.</p>\n<p>C'est en 2000 que Roy Fielding cr√©e le <strong>standard REST</strong> afin de <strong>normaliser de mani√®re simple ces API</strong> et d'utiliser au maximum le standard HTTP. Cette norme est bas√©e sur 4 niveaux souvent appel√©s &quot;<a href=\"https://martinfowler.com/articles/richardsonMaturityModel.html\">Glory of REST</a>&quot;.</p>\n<p>Voyons comment cela se pr√©sente.</p>\n<p><img src=\"https://media.giphy.com/media/JUh0yTz4h931K/giphy.gif\" alt=\"GIF: D√©tective regardant avec une loupe\"></p>\n<h2>Les ressources</h2>\n<p>Une API sert avant tout √† <strong>ex√©cuter des actions sur des ressources</strong> m√©tiers. Il faut donc dans un premier temps <strong>d√©finir ces ressources</strong>.</p>\n<blockquote>\n<p>Par exemple, si je veux cr√©er une API permettant de g√©rer une biblioth√®que musicale. Mes ressources seront donc : les albums, les artistes et les pistes.</p>\n</blockquote>\n<p>Les ressources <strong>se pr√©sentent sous la forme d'un objet JSON</strong> et se d√©coupent en plusieurs cat√©gories : les <strong>entit√©s</strong> et les <strong>collections</strong>.</p>\n<h3>Entit√© üìï</h3>\n<p>Une entit√© est la <strong>repr√©sentation la plus simple d'une ressource</strong>. Elle permet simplement d'en afficher les d√©tails.</p>\n<blockquote>\n<p>Voici un exemple de repr√©sentation de mon entit√© &quot;album&quot;</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">7291</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"The Groove Sessions\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"year\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2007</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"artwork\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/path/to/artwork.jpeg\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"artists\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">4523</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Chinese Man\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n</blockquote>\n<h3>Collections üìö</h3>\n<p>Une collection est <strong>une liste d'entit√©s</strong>.</p>\n<blockquote>\n<p>Exemple de la liste de mes albums</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"items\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">7291</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"The Groove Sessions\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">7745</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Epoch\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    ...\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"count\"</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"limit\"</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"total\"</span><span class=\"token operator\">:</span> <span class=\"token number\">26</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n</blockquote>\n<p>Comme on peut le voir dans l'exemple, l'avantage de retourner un objet et non directement une liste est la possibilit√© d‚Äôajouter la pagination de notre liste ou des √©l√©ments associ√©s √† celle-ci.</p>\n<h3>Erreurs ‚ùå</h3>\n<p>Une erreur n'est pas vraiment une ressource r√©elle, mais elle a tout de m√™me un sch√©ma qui est int√©ressant √† travailler.</p>\n<p><img src=\"/img/posts/rest/error.png\" alt=\"- Developpeur : &quot;Mais putain&quot;, - API: &quot;Unknown error. Please try again&quot;\"></p>\n<p>Comme le montre cette vignette de <a href=\"http://www.commitstrip.com/fr/2013/07/01/quand-lapi-rend-fou/\">CommitStrip.com</a>, il est toujours frustrant pour un d√©veloppeur de ne pas comprendre l'erreur renvoy√©e par le webservice. Il est donc n√©cessaire de renvoyer une erreur correctement format√©e.</p>\n<blockquote>\n<p>Voyons un exemple d'erreur</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"message\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Album not found\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"status\"</span><span class=\"token operator\">:</span> <span class=\"token number\">404</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"not_found\"</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n</blockquote>\n<h2>Les URI</h2>\n<blockquote>\n<p>&quot;Un <strong>URI</strong>, de l'anglais <em>Uniform Resource Identifier</em>, soit litt√©ralement <em>identifiant uniforme de ressource</em>, est une courte cha√Æne de caract√®res identifiant une ressource sur un r√©seau.&quot;\n-- &lt;cite&gt;<a href=\"https://fr.wikipedia.org/wiki/Uniform_Resource_Identifier\">URI, Wikipedia</a>&lt;/cite&gt;</p>\n</blockquote>\n<h3>URI = Ressource</h3>\n<p>Il est important de garder une r√®gle en t√™te : &quot;<strong>Chaque URI correspond √† une ressource de notre syst√®me et non √† une action</strong>&quot;.</p>\n<h4>Collection</h4>\n<p>L'URI associ√© √† une liste d'entit√©s (une collection, donc) se pr√©sente sous la forme <code>/entities</code> (avec un <em>s</em> pour mettre en avant la pluralit√© des entit√©s).</p>\n<blockquote>\n<p>L'URI correspondant √† ma collection d'albums sera donc <code>/albums</code>.</p>\n</blockquote>\n<h4>Entit√©</h4>\n<p>Pour requ√™ter une entit√© il faut garder en t√™te cette phrase : &quot;je requ√™te une entit√© de ma collection&quot;, ainsi, l'URI tombe sous le sens et sera <code>/entities/{entity-id}</code> (on r√©cup√®re un item de la collection, celle-ci garde donc son <em>s</em> pour rester coh√©rente).</p>\n<blockquote>\n<p>L'URI correspondant √† un album sera <code>/albums/{album-id}</code></p>\n</blockquote>\n<h4>Le cas des sous-ressources</h4>\n<p>Dans certains cas, une ressource est d√©pendante d'une autre, c'est ce que l'on appelle une <strong>sous-ressource</strong>.</p>\n<p>L'URI correspondante √† une collection de sous-ressources sera <code>/entities/{entity-id}/sub-resources</code> et pour r√©cup√©rer une entit√© <code>/entities/{entity-id}/sub-resources/{sub-resource-id}</code>.</p>\n<blockquote>\n<p>Dans l'exemple, on peut se dire que les titres seront les enfants d'un album. On pourra donc avoir ces URI :</p>\n<ul>\n<li>Collection de pistes d'un album : <code>/albums/{album-id}/tracks</code></li>\n<li>Piste (d'une collection de pistes) d'un album : <code>/albums/{album-id}/tracks/{track-id}</code></li>\n</ul>\n</blockquote>\n<h3>Utilisation des param√®tres de requ√™te</h3>\n<p>Les param√®tres de requ√™te (appel√©s QueryParams) sont des <strong>param√®tres optionnels</strong> qui s'ajoutent √† la fin de mon URL.</p>\n<h4>Rechercher</h4>\n<p>Comme Google, on peut utiliser un param√®tre <code>q</code> pour <strong>faire une recherche sur une collection</strong>.</p>\n<blockquote>\n<p>Pour rechercher les albums on peut faire quelque chose comme <code>/albums?q=Dyna-Mite</code></p>\n</blockquote>\n<h4>Filtrer</h4>\n<p>Les param√®tres permettent √©galement de <strong>filtrer les √©l√©ments d'une collection</strong>. On utilisera g√©n√©ralement l'attribut de la ressource comme cl√©.</p>\n<blockquote>\n<p>Pour lister les albums d'une ann√©e sp√©cifique on peut pr√©voir un URI comme <code>/albums?year=2007</code></p>\n</blockquote>\n<h4>Pagination</h4>\n<p>On peut paginer simplement une collection comme on le ferait sur un site standard en ajoutant deux param√®tres <code>page</code> permettant d'afficher une page et <code>limit</code> permettant de sp√©cifier le nombre d'items par page.</p>\n<blockquote>\n<p>Pour paginer mes albums par pas de 10 et s√©lectionner la deuxi√®me page, je ferais certainement quelque chose comme <code>/albums?page=2&amp;limit=10</code></p>\n</blockquote>\n<p>Il y a d'autres types de pagination, par exemple on peut paginer par gamme et pr√©voir un param√®tre de type <code>range=0-10</code>, etc.</p>\n<p>En bref, on peut faire ce que l'on veut üéâ.</p>\n<h4>Tri</h4>\n<p>Afin de trier une collection, les query params sont la solution par excellence. Il suffit d'ajouter un param√®tre <code>sort</code> et le tour est jouer.</p>\n<p><em>Tips: Afin de choisir dans quel ordre trier mes √©l√©ments, j'ajoute un <code>-</code> quand il s'agit d'un ordre d√©croissant.</em></p>\n<blockquote>\n<p>Pour trier les albums par ann√©es d√©croissantes mon URI sera <code>/albums?sort=-year</code>.</p>\n</blockquote>\n<h4>Format</h4>\n<p>Une API doit pouvoir s'adapter aux besoins des clients (applications, services, etc.). On peut donc leur laisser la main sur les donn√©es dont ils ont besoin et ainsi optimiser le poids des requ√™tes. Ainsi, on ajoute un param√®tre <code>fields</code> pour <strong>lister les champs √† remonter</strong> lors de l'appel.</p>\n<blockquote>\n<p>Si on veut lister les albums en affichant seulement leur titre, l'URI sera <code>/albums?fields=title</code></p>\n</blockquote>\n<h2>Les verbes HTTP</h2>\n<p>La plupart du temps, un API sert √† afficher, cr√©er, modifier et supprimer des entit√©s de notre application, c'est ce qu'on appelle un <strong>CRUD</strong>.</p>\n<blockquote>\n<p>&quot;L'acronyme informatique anglais <strong>CRUD</strong> (pour <em>create</em>, <em>read</em>, <em>update</em>, <em>delete</em>) [...] d√©signe les quatre op√©rations de base pour la persistance des donn√©es.&quot;&lt;br&gt;\n-- &lt;cite&gt;<a href=\"https://fr.wikipedia.org/wiki/CRUD\">CRUD, Wikipedia</a>&lt;/cite&gt;</p>\n</blockquote>\n<h3>CRUD</h3>\n<p>Pour ce faire, nous allons utiliser <a href=\"https://developer.mozilla.org/fr/docs/Web/HTTP/M%C3%A9thode\"><strong>les verbes que met HTTP √† notre disposition</strong></a>, c'est-√†-dire <strong>GET</strong>, <strong>POST</strong>, <strong>PATCH</strong>, <strong>PUT</strong> et <strong>DELETE</strong>.</p>\n<p><img src=\"https://media.giphy.com/media/dUMyRVhUMmD1m/giphy.gif\" alt=\"\"></p>\n<p>Voici un petit tableau permettant de comprendre le r√¥le de chaque verbe lorsqu'il est ex√©cut√© sur une entit√© ou une collection.</p>\n<table>\n<thead>\n<tr>\n<th>Verbe</th>\n<th>Collection</th>\n<th>Entit√©</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>GET</td>\n<td>Liste les entit√©s</td>\n<td>Affiche le d√©tail d'une entit√©</td>\n</tr>\n<tr>\n<td>POST</td>\n<td>Cr√©er une entit√©</td>\n<td>-</td>\n</tr>\n<tr>\n<td>PATCH</td>\n<td>-</td>\n<td>Modifie l'entit√©</td>\n</tr>\n<tr>\n<td>DELETE</td>\n<td>-</td>\n<td>Supprime l'entit√©</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>Reprenons notre collection musicale. Voici la liste des actions disponibles pour notre ressource &quot;Albums&quot; :</p>\n<ul>\n<li><code>GET /albums</code> : R√©cup√®re la liste des albums</li>\n<li><code>POST /albums</code> : Ajoute un album √† notre collection</li>\n<li><code>GET /albums/{album}</code> : Affiche le d√©tail de l'album</li>\n<li><code>PATCH /albums/{album}</code> : Modifie l'album</li>\n<li><code>DELETE /albums/{album}</code> : Supprime l'album</li>\n</ul>\n</blockquote>\n<h4>Idempotence</h4>\n<p>L'idempotence est le fait que lorsqu'une requ√™te est appel√©e plusieurs fois, le r√©sultat obtenu ne varie pas.</p>\n<p>Les verbes <code>GET</code>, <code>PUT</code>, <code>PATCH</code>, <code>DELETE</code> sont idempotents. Seul <code>POST</code> ne l'est pas, car il cr√©e une entit√© √† chaque appel.</p>\n<p>cf. <a href=\"https://restfulapi.net/idempotent-rest-apis/\">Idempotent REST API</a></p>\n<h4><em>PATCH</em> ton <em>POST</em></h4>\n<p>Ces deux verbes HTTP permettent d'ajouter un corps (<em>content</em>) √† notre requ√™te. Ce corps sera √©galement un object JSON et repr√©sentera les attributs d'entr√©e de l'objet (ceux utiles √† sa cr√©ation).</p>\n<blockquote>\n<p>Si nous voulons cr√©er un nouvel album, nous ex√©cuterons cette requ√™te :</p>\n<pre class=\"language-markdown\"><code class=\"language-markdown\"><span class=\"token title important\"><span class=\"token punctuation\">#</span> POST /albums</span>\n<span class=\"token list punctuation\">+</span> Request (application/json)\n{\n    \"title\": \"Lunar Lane\",\n    \"year\": \"2015\"\n}\n\n<span class=\"token list punctuation\">+</span> Response 201 (application/json)\n{\n    \"id\": 274,\n    \"title\": \"Lunar Lane\",\n    \"year\": \"2015\"\n}\n</code></pre>\n<p>Et pour modifier cet album</p>\n<pre class=\"language-markdown\"><code class=\"language-markdown\"><span class=\"token title important\"><span class=\"token punctuation\">#</span> PATCH /albums/274</span>\n<span class=\"token list punctuation\">+</span> Request (application/json)\n{\n    \"title\": \"Lunar Lane (Deluxe)\",\n    \"year\": \"2015\"\n}\n\n<span class=\"token list punctuation\">+</span> Response 200 (application/json)\n{\n    \"id\": 274,\n    \"title\": \"Lunar Lane (Deluxe)\",\n    \"year\": \"2015\"\n}\n</code></pre>\n</blockquote>\n<h3>Le cas des ressources li√©es</h3>\n<p>Afin de lier deux ressources entre elles sans d√©finir pour autant de lien de parent√© j'utilise le verbe <code>PUT</code>.</p>\n<blockquote>\n<p>Les artistes poss√®dent plusieurs albums, on va donc lier un artiste √† un album (ce choix est arbitraire) :</p>\n<ul>\n<li><code>GET /artists/{artist}/albums</code> : Liste les albums li√©s √† un artiste</li>\n<li><code>PUT /artists/{artist}/albums/{album}</code> : Lie l'album √† l'artiste</li>\n<li><code>DELETE /artists/{artist}/albums/{album}</code> : Supprime uniquement la liaison entre l'album et l'artiste</li>\n</ul>\n</blockquote>\n<h3>Actions particuli√®res</h3>\n<p>Bien s√ªr <strong>certaines actions ne se r√©sument pas aux simples CRUD</strong>. Dans ce cas, il est n√©cessaire de faire un <strong>URI particulier en y ajoutant un verbe</strong>.</p>\n<p><img src=\"https://media.giphy.com/media/SqmkZ5IdwzTP2/giphy.gif\" alt=\"WHAT?!?\"></p>\n<p>Oui, au d√©but de mon article je vous ai dit &quot;pas de verbes&quot;, mais ces actions sont <strong>l'exception qui confirme la r√®gle</strong>.</p>\n<p>Bien s√ªr, il faut avant tout essayer de faire rentrer cette action dans un des verbes HTTP. Cette nouvelle URL sera <strong>forc√©ment appel√©e en POST</strong>.</p>\n<blockquote>\n<p>Par exemple, si je veux lire une piste d'un album, je n'ai pas de verbe HTTP qui correspondrait... Je vais donc <strong>exceptionnellement</strong> cr√©er cette action :</p>\n<pre><code>POST /albums/{album-id}/tracks/{track-id}/play\n</code></pre>\n</blockquote>\n<h2>Les &quot;status code&quot;</h2>\n<p><img src=\"https://www.commitstrip.com/wp-content/uploads/2018/08/Strip-Response-code-650-final.jpg\" alt=\"\"></p>\n<p>Comme le montre tr√®s bien cette planche de l'excellent <a href=\"http://www.commitstrip.com/fr/2018/08/24/http-headers-ftw/\">CommitStrip.com</a>, en plus de retourner un <a href=\"#erreurs-\">format d'erreur</a> correct il est important d'<strong>utiliser les status codes correspondants</strong>.</p>\n<blockquote>\n<p>Un des <em>status code</em> le plus connu est 404, que l'on croise r√©guli√®rement, mais qu'en est-il des <a href=\"https://en.wikipedia.org/wiki/List_of_HTTP_status_codes\">autres</a> ?</p>\n</blockquote>\n<p>L'id√©e n'est pas de vous lister un √† un l'int√©gralit√© des <em>status codes</em>, mais de vous montrer les plus utilis√©s et les plus subtiles.</p>\n<p>Ceux-ci ce d√©coupent en 4 cat√©gories : <strong>1xx</strong>, <strong>2xx</strong>, <strong>3xx</strong>, <strong>4xx</strong> et <strong>5xx</strong>. <em>On ne va pas parler des erreurs de type 1xx, qui n'ont pas grand int√©r√™t pour ma part.</em></p>\n<p>Allez, pour rendre le tout plus fun, ces codes seront illustr√©s par <a href=\"https://http.cat/\">des chats</a> (c'est cadeau üéÅ).</p>\n<h3>2xx : <em>Tout va bien</em></h3>\n<p><img src=\"https://http.cat/204\" alt=\"200 - OK\"></p>\n<p>Les statuts 2xx sont retourn√©s par le serveur quand <strong>tout s'est bien pass√©</strong>.</p>\n<table>\n<thead>\n<tr>\n<th>Code</th>\n<th>Erreur</th>\n<th>Cas d'usage</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>200</td>\n<td><em>OK</em></td>\n<td>Il est utilis√© pour <strong>tous les retours d'une API qui se passe bien</strong> et qui ne rentre pas dans les cas suivants.</td>\n</tr>\n<tr>\n<td>201</td>\n<td><em>Created</em></td>\n<td>Il est utilis√© lors d'<strong>un retour positif de cr√©ation</strong> (POST) ou de liaison (PUT) d'une ressource.</td>\n</tr>\n<tr>\n<td>204</td>\n<td><em>No Content</em></td>\n<td>Il est utilis√© √† la suite d'<strong>une r√©ussite de suppression</strong> (DELETE). <em>Le corps de la r√©ponse doit √™tre vide.</em></td>\n</tr>\n<tr>\n<td>206</td>\n<td><em>Partial Content</em></td>\n<td>Il est utilis√© lorsque la collection retourn√©e n'est pas compl√®te. <em>Si la collection contient 2 pages, la premi√®re appel√©e retournera un statut 206 et la deuxi√®me un statut 200.</em></td>\n</tr>\n</tbody>\n</table>\n<h3>3xx : <em>Regarde ailleurs</em></h3>\n<p><img src=\"https://http.cat/301\" alt=\"301 - Move Permanently\"></p>\n<p>Les status 3xx sont retourn√©es lorsque la ressource est √† retrouver ailleurs (dans une autre URL, dans le cache, etc.).</p>\n<table>\n<thead>\n<tr>\n<th>Code</th>\n<th>Erreur</th>\n<th>Cas d'usage</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>301</td>\n<td><em>Moved Permanently</em></td>\n<td>Il est utilis√© lorsque <strong>la ressource a √©t√© d√©plac√©e</strong>. Il est accompagn√© d'un header <code>Location: {URL de la ressource}</code></td>\n</tr>\n<tr>\n<td>304</td>\n<td><em>Not Modified</em></td>\n<td>Il est utilis√© pour dire au client que <strong>la ressource n'a pas √©t√© modifi√©e depuis son dernier appel</strong>. <em>La ressource ne sera pas renvoy√©e, le client prendra donc par d√©faut l'entit√© en cache.</em></td>\n</tr>\n</tbody>\n</table>\n<h3>4xx : <em>Tu t'es plant√©</em></h3>\n<p><img src=\"https://http.cat/404\" alt=\"404 - Not Found\"></p>\n<p>Les statuts 4xx sont renvoy√©s lorsque le client de l'API a fait une erreur ou ne peut pas acc√©der √† la ressource.</p>\n<p>Ces erreurs seront <strong>toujours accompagn√©es d'un objet &quot;erreur&quot;</strong> (vu pr√©c√©demment).</p>\n<table>\n<thead>\n<tr>\n<th>Code</th>\n<th>Erreur</th>\n<th>Cas d'usage</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>400</td>\n<td><em>Bad Request</em></td>\n<td>Il est utilis√© lorsque le contenu de <strong>la requ√™te ne correspond pas √† ce qui est demand√©</strong>. <em>Lors de la cr√©ation d'une entit√©, si un champ est mal renseign√© par exemple.</em></td>\n</tr>\n<tr>\n<td>401</td>\n<td><em>Unauthorized</em></td>\n<td>Il est utilis√© lorsque <strong>le client n'a pas acc√®s √† la ressource</strong>, car il doit sp√©cifier un toque ou une cl√© d'API.</td>\n</tr>\n<tr>\n<td>403</td>\n<td><em>Forbidden</em></td>\n<td>Il est utilis√© lorsque <strong>le client n'a pas acc√®s √† la ressource</strong>. La subtile diff√©rence avec la 401 r√©side dans le fait que m√™me si le client renseigne un toque ou une cl√© d'API valide, la ressource lui sera toujours refus√©e.</td>\n</tr>\n<tr>\n<td>404</td>\n<td><em>Not Found</em></td>\n<td>Dois-je r√©ellement vous l'expliquer ? Il est utilis√© lorsqu'<strong>une ressource est introuvable</strong>.</td>\n</tr>\n<tr>\n<td>409</td>\n<td><em>Conflict</em></td>\n<td>Il est, par exemple, utilis√© lorsque deux ressources sont d√©j√† li√©es entre-elles suite √† un PUT.</td>\n</tr>\n</tbody>\n</table>\n<h3>5xx : <em>Je me suis plant√©</em></h3>\n<p><img src=\"https://http.cat/500\" alt=\"500 - Internal Server Error\"></p>\n<p>Les status 5xx sont retourn√©es lorsque le serveur a un probl√®me.</p>\n<p>Ces erreurs seront <strong>toujours accompagn√©es d'un objet &quot;erreur&quot;</strong> (vu pr√©c√©demment).</p>\n<table>\n<thead>\n<tr>\n<th>Code</th>\n<th>Erreur</th>\n<th>Cas d'usage</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>500</td>\n<td><em>Internal Server Error</em></td>\n<td>Lorsque le script ne se d√©roule pas correctement, mais que le client n'y est pour rien.</td>\n</tr>\n</tbody>\n</table>\n<h2>Exemple</h2>\n<p>Comme je vous trouve sympas, je vous donne la documentation compl√®te de l'API d'exemple : <a href=\"https://musicapi7.docs.apiary.io/#\">Music API</a>.</p>\n<p>Pour cette documentation, j'ai utilis√© <a href=\"https://apiblueprint.org/\">API BluePrint</a>, un langage bas√© sur Markdown, mais ax√© Rest (je vous ferais un petit article √† ce sujet, c'est promis üòâ).</p>\n<p><img src=\"https://media.giphy.com/media/3o85xwxr06YNoFdSbm/giphy.gif\" alt=\"You're Welcome\"></p>\n<h2>Glory of REST</h2>\n<p>Certains formats de ressources permettent d'aller plus loin et d'am√©liorer l'exp√©rience d√©veloppeur lors des appels API. Je ne vais pas m'attarder sur ces formats, mon but est simplement de vous faire une petite introduction et vous donner envie d'aller plus loin.</p>\n<h3>HATEOAS</h3>\n<p>HATEOAS, <em>Hypermedia As The Engine Of Application State</em>, permet de formaliser les ressources de la m√™me mani√®re qu'on le ferait en HTML : <strong>en cr√©ant des liens entres-elles</strong>. Cela permet de <strong>naviguer dans l'API sans conna√Ætre sa documentation</strong>, mais uniquement son point d'entr√©e.</p>\n<blockquote>\n<p>Reprenons mon exemple. Voici ce que donnerait un r√©sultat d'album en HATEOAS :</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"628\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"The Groove Sessions\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"artists\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Chinese Man\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"links\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token property\">\"rel\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"self\"</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token property\">\"href\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/artists/4\"</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span>\n  \t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"year\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2007\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"created_at\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1535021696\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"links\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"rel\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"list\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"href\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/albums\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"rel\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"self\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"href\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/albums/628\"</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"rel\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tracks\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"href\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/albums/628/tracks\"</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n</blockquote>\n<h3>JSON Schema</h3>\n<p>Le but ici est de <strong>documenter notre API</strong> en utilisant un sch√©ma. C'est tr√®s utile pour tester que le retour d'une API est conforme √† sa documentation, mais aussi pour cr√©er les mod√®les dans notre langage de programmation pr√©f√©r√©.</p>\n<blockquote>\n<p>Dans mon exemple d'API, un album se pr√©sente comme ceci :</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"$schema\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://json-schema.org/draft-04/schema#\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"object\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"properties\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"string\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"string\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"artists\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"array\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"year\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"string\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"created_at\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"string\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n</blockquote>\n<h3>JSONLD</h3>\n<p>√Ä la mani√®re du JSON Sch√©ma, le but est de d√©crire nos ressources, mais cette fois-ci dans des <strong>sch√©mas standardis√©s</strong>.</p>\n<blockquote>\n<p>Prenons l'exemple de la documentation. Si la ressource est une personne, je ne vais pas r√©inventer les informations d'une personne, donc je peux directement utiliser un sch√©ma standard de Personne : <a href=\"https://json-ld.org/contexts/person.jsonld\">https://json-ld.org/contexts/person.jsonld</a>.</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"@context\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://json-ld.org/contexts/person.jsonld\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"@id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://dbpedia.org/resource/John_Lennon\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"John Lennon\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"born\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1940-10-09\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"spouse\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://dbpedia.org/resource/Cynthia_Lennon\"</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n</blockquote>\n<h2>Pour aller plus loin</h2>\n<p>Et voil√†, vous voyez ce n'est pas tr√®s complexe !</p>\n<p><img src=\"https://media.giphy.com/media/zcCGBRQshGdt6/giphy.gif\" alt=\"GIF: ... That was easy !\"></p>\n<p>Maintenant, si vous √™tes dev back, vous n'aurez plus aucune excuse pour oublier un status code. Et si vous √™tes dev front, partagez cet article √† votre dev back !</p>\n<p>Comme toujours, je vous mets quelques liens que je trouve int√©ressants √† ce sujet :</p>\n<ul>\n<li><a href=\"https://www.restapitutorial.com/\">A RESTful Tutorial</a> (en anglais)</li>\n<li><a href=\"https://blog.octo.com/wp-content/uploads/2014/12/OCTO-Refcard_API_Design_EN_3.0.pdf\">Quick Card Reference</a> (PDF, en anglais)</li>\n<li><a href=\"http://putaindecode.io/fr/articles/api/hateoas/\">HATEOAS, le Graal des d√©veloppeurs d'API</a> (en fran√ßais)</li>\n<li><a href=\"https://musicapi7.docs.apiary.io\">Exemple d'API</a> (en anglais)</li>\n</ul>\n<p>N'h√©sitez pas √† <strong>partager cet article</strong> et envoyer <strong>vos questions ou vos ressources en commentaires</strong> !</p>\n<p><img src=\"https://media.giphy.com/media/l1J3CbFgn5o7DGRuE/giphy.gif\" alt=\"GIF: See You Soon!\"></p>\n<p>√Ä bient√¥t ! Q.</p>\n","path":"/posts/concevoir-une-api-restful","excerpt":"Techniques de base pour designer une API, en utilisant le standard REST","cover":"https://user-images.githubusercontent.com/11388211/75194633-c90c8180-5758-11ea-92ea-3195db8b611f.jpg","tags":["api","backend"],"author":{"username":"qmachard","name":"Quentin Machard","avatar":"https://avatars1.githubusercontent.com/u/11388211?v=4","github":"https://github.com/qmachard"},"published_at":"2020-02-24"}},"pageContext":{}}}